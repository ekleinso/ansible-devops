---
# 1. Fail if required parameters are not set
# -----------------------------------------------------------------------------
- name: "Fail if required properties have not been provided"
  assert:
    that:
      - db2_instance_name is defined and db2_instance_name != ""
      - db2_entitlement_key is defined and db2_entitlement_key != ""
    fail_msg: "One or more required properties have not been set"

# 2. Setup the norootsquash daemonsets for db2u pods to work with NFS backed storage
# -----------------------------------------------------------------------------
- include_tasks: tasks/setup_norootsquash.yml


# 3. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Namespace .................... {{ db2_namespace }}"
      - "Storage class (meta) ......... {{ db2_meta_storage_class }}"
      - "Storage class (data) ......... {{ db2_data_storage_class }}"
      - "Storage class (backup) ....... {{ db2_backup_storage_class }}"
      - "Storage class (logs) ......... {{ db2_logs_storage_class }}"
      - "Storage class (temp) ......... {{ db2_temp_storage_class }}"
      - "Db2 database instanceId ...... {{ db2_instance_name }}"
      - "Db2 database name ............ {{ db2_dbname }}"
      - "Db2 version .................. {{ db2_version }}"


# 4. Install a Db2u Operator
# -----------------------------------------------------------------------------
- name: "Create {{ db2_namespace }} Namespace"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/db2u_namespace.yaml') }}"
  register: _db2_namespace_result

- name: Set 'ibm-registry' secret content
  vars:
    entitledAuthStr: "{{ registry_user }}:{{ db2_entitlement_key }}"
    entitledAuth: "{{ entitledAuthStr | b64encode }}"
    content:
      - "{\"auths\":{\"{{ registry }}/cp/cpd\":{\"username\":\"{{ registry_user }}\",\"password\":\"{{ db2_entitlement_key }}\",\"email\":\"{{ registry_user }}\",\"auth\":\"{{ entitledAuth }}\"}"
      - "}"
      - "}"
  set_fact:
    new_secret: "{{ content | join('') }}"

- name: "Generate 'ibm-registry' secret"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: ibm-registry
        namespace: "{{ db2_namespace }}"
      data:
        .dockerconfigjson: "{{ new_secret | to_json | b64encode }}"
  register: secretUpdateResult

- name: "Create db2u Operator"
  kubernetes.core.k8s:
    template: templates/db2u_operator.yml.j2
    wait: yes
    wait_timeout: 120

- name: "Wait for db2u operator to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: db2u-operator-manager
    namespace: "{{ db2_namespace }}"
    kind: Deployment
  register: _operand_deployment
  until: _operand_deployment.resources[0].status.availableReplicas is defined
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# 5. Get the cluster subdomain to be used for the certificate and route creation
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

# 6. Taint and label dedicated node if specified
# -----------------------------------------------------------------------------
- name: Taint and label dedicated worker node
  when:
    - db2_node_label is defined and db2_node_label != ''
    - db2_dedicated_node is defined and db2_dedicated_node != ''
  shell: |
    oc adm taint node {{ db2_dedicated_node }} database={{ db2_node_label }}:NoSchedule --overwrite
    oc adm drain {{ db2_dedicated_node }} --ignore-daemonsets --delete-local-data
    oc label node {{ db2_dedicated_node }} database={{ db2_node_label }} --overwrite
    oc adm uncordon {{ db2_dedicated_node }}


# 7. Wait until the Db2uCluster CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the Db2uCluster CRD is available"
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: db2uclusters.db2u.databases.ibm.com
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: db2_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - db2_crd_info.resources is defined
    - db2_crd_info.resources | length > 0


# 8. Lookup db2 instance to see if it exists already
# -----------------------------------------------------------------------------
- name: "See if db2u instance already exists"
  kubernetes.core.k8s_info:
    api_version: db2u.databases.ibm.com/v1
    name: "{{ db2_instance_name | lower }}"
    namespace: "{{db2_namespace}}"
    kind: Db2uCluster
  register: initial_db2_cluster_lookup


# 9. Create a Db2 instance
# -----------------------------------------------------------------------------
- name: "Create db2 instance"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/db2ucluster.yml.j2') }}"


# 10. Wait for the cluster to be ready
# -----------------------------------------------------------------------------
- name: "Wait for db2u instance to be ready (5m delay)"
  kubernetes.core.k8s_info:
    api_version: db2u.databases.ibm.com/v1
    name: "{{ db2_instance_name | lower }}"
    namespace: "{{db2_namespace}}"
    kind: Db2uCluster
  register: db2_cluster_lookup
  until:
    - db2_cluster_lookup.resources is defined
    - db2_cluster_lookup.resources | length == 1
    - db2_cluster_lookup.resources[0].status is defined
    - db2_cluster_lookup.resources[0].status.state is defined
    - db2_cluster_lookup.resources[0].status.state == "Ready"
  retries: 24 # Approximately 2 hours before we give up
  delay: 300 # 5 minutes


# 11. Configure a public route for Db2
# -----------------------------------------------------------------------------
- name: Lookup db2u Engn Service
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: "c-{{db2_instance_name | lower}}-db2u-engn-svc"
    namespace: "{{db2_namespace}}"
  register: _db2_instance_engn_svc
  until:
    - _db2_instance_engn_svc.resources[0] is defined
  retries: 15 # approx 5 minutes before we give up
  delay: 20

- name: "Create Db2u route"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tlsroute.yml.j2') }}"

# 12. Delete db2 pod on intial setup only, to workaround db2 issue
# that was causing TLS connection issues when the pod was first started
# -----------------------------------------------------------------------------
- name: Delete db2u pod on intial setup
  kubernetes.core.k8s:
    api_version: v1
    kind: Pod
    name: "c-{{db2_instance_name | lower}}-db2u-0"
    namespace: "{{db2_namespace}}"
    state: absent
  when: initial_db2_cluster_lookup.resources | length == 0

# 13. create an LDAP user if db2_ldap_username specified
# -----------------------------------------------------------------------------
- include_tasks: tasks/create_ldap_user.yml
  when:
    - db2_ldap_username is defined
    - db2_ldap_username != ""
    - db2_ldap_password is defined
    - db2_ldap_password != ""

# 14. Wait for the statefulset to be ready
# -----------------------------------------------------------------------------
- name: "Wait for Db2 Stateful set to be ready"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: StatefulSet
    name: "c-{{ db2_instance_name | lower }}-db2u"
    namespace: "{{ db2_namespace }}"
  register: db2_sts
  until:
    - db2_sts.resources is defined
    - db2_sts.resources | length > 0
    - db2_sts.resources[0].status is defined
    - db2_sts.resources[0].status.replicas is defined
    - db2_sts.resources[0].status.readyReplicas is defined
    - db2_sts.resources[0].status.readyReplicas == db2_sts.resources[0].status.replicas
  retries: 20 # approx 10 minutes before we give up
  delay: 30 # seconds

# 16. Provide connection information to the user
# -----------------------------------------------------------------------------
- name: "Get instance password"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "c-{{ db2_instance_name | lower }}-instancepassword"
    namespace: "{{ db2_namespace }}"
  register: db2_instancepassword

- name: "Connection information"
  debug:
    msg:
      - "Host .............. {{db2_instance_name | lower }}-{{db2_namespace}}.{{_cluster_subdomain.resources[0].spec.domain}}"
      - "Port .............. {{ _db2_instance_engn_svc.resources[0].spec.ports[0].nodePort }}"
      - "User .............. db2inst1"
      - "Password .......... {{ db2_instancepassword.resources[0].data.password | b64decode }}"
      - "DB name ........... {{ db2_dbname }}"
