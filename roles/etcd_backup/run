ETCD_BACKUP_NAMESPACE="openshift-cluster-ops"
ETCD_BACKUP_USERNAME="etcd-backup-user"
ETCD_BACKUP_USER="system:serviceaccount:${ETCD_BACKUP_NAMESPACE}:${ETCD_BACKUP_USERNAME}"
ETCD_CLUSTER_ID="demo"
ETCD_BACKUP_PVC_CLAIM="${ETCD_CLUSTER_ID}-etcd-backup"
ETCD_BACKUP_VOLUME_SIZE="10Gi"
ETCD_BACKUP_CONFIGMAP="etcd-backup-scripts"

oc apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: ${ETCD_BACKUP_NAMESPACE}
  annotations:
    openshift.io/node-selector: ""
spec:
  finalizers:
  - kubernetes
EOF


oc apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    purpose: etcd-backup
  name: ${ETCD_BACKUP_USERNAME}
  namespace: ${ETCD_BACKUP_NAMESPACE}
EOF

oc adm policy add-scc-to-user privileged ${ETCD_BACKUP_USER}
oc adm policy add-scc-to-user anyuid ${ETCD_BACKUP_USER}

oc apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${ETCD_BACKUP_PVC_CLAIM}
  namespace: ${ETCD_BACKUP_NAMESPACE}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: ${ETCD_BACKUP_VOLUME_SIZE}
EOF

ETCD_IMAGE=`oc get pod -n openshift-etcd $(oc -n openshift-etcd get pod -l app=etcd --no-headers | head -1 | awk '{print $1}') -o jsonpath='{.spec.containers[*].image}' | awk '{print $1}'`

oc create cm -n ${ETCD_BACKUP_NAMESPACE} ${ETCD_BACKUP_CONFIGMAP} --from-file=etcd-backup.sh=etcd-backup.sh --from-file=etcd-snapshot-backup-disconnected.sh=backup_script-4.6.sh 

oc apply -f - <<EOF
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    purpose: etcd-backup
  name: cronjob-etcd-backup
  namespace: ${ETCD_BACKUP_NAMESPACE}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 5
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          activeDeadlineSeconds: 200
          containers:
          - command:
            - /usr/local/bin/etcd-backup.sh
            image: ${ETCD_IMAGE}
            imagePullPolicy: IfNotPresent
            name: etcd-backup
            resources:
              requests:
                cpu: 300m
                memory: 250Mi
            securityContext:
              privileged: true
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            volumeMounts:
            - mountPath: /etc/ssl/etcd/
              name: certs
            - mountPath: /etc/etcd/
              name: conf
            - mountPath: /etc/kubernetes/
              name: kubeconfig
            - mountPath: /usr/local/bin
              name: scripts
            - mountPath: /etcd-backup
              name: etcd-backup
            - mountPath: /usr/local/bin/etcd-backup.sh
              name: etcd-backup-scripts
              subPath: etcd-backup.sh
            - mountPath: /usr/local/bin/etcd-snapshot-backup-disconnected.sh
              name: etcd-backup-scripts
              subPath: etcd-snapshot-backup-disconnected.sh
            env:
              - name: HOST_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
          nodeSelector:
            node-role.kubernetes.io/master: ""
          dnsPolicy: ClusterFirst
          securityContext:
            runAsuser: 0
          serviceAccount: ${ETCD_BACKUP_USERNAME}
          serviceAccountName: ${ETCD_BACKUP_USERNAME}
          hostNetwork: true
          restartPolicy: Never
          terminationGracePeriodSeconds: 30
          tolerations:
          - effect: NoSchedule
            operator: Exists
          - effect: NoExecute
            operator: Exists
          volumes:
          - name: certs
            hostPath:
              path: /etc/kubernetes/static-pod-resources/etcd-member
              type: ""
          - name: conf
            hostPath:
              path: /etc/etcd
              type: ""
          - name: kubeconfig
            hostPath:
              path: /etc/kubernetes
              type: ""
          - name: scripts
            hostPath:
              path: /usr/local/bin
              type: ""
          - name: etcd-backup
            persistentVolumeClaim:
              claimName: ${ETCD_BACKUP_PVC_CLAIM}
          - name: etcd-backup-scripts
            configMap:
              name: ${ETCD_BACKUP_CONFIGMAP}
              defaultMode: 0755
  schedule: '0 7 * * *'
  startingDeadlineSeconds: 200
  successfulJobsHistoryLimit: 5
EOF
